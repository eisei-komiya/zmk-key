#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <500>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <500>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        tg-win {
            bindings = <&bt0>;
            key-positions = <42 33>;
        };

        tg-mac {
            bindings = <&bt1>;
            key-positions = <42 21>;
        };

        bootcombo {
            bindings = <&bootloader>;
            key-positions = <42 9>;
        };

        bluetoothe_layer_active {
            bindings = <&mo 5>;
            key-positions = <9 5>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <8 9>;
        };

        minus2 {
            bindings = <&kp MINUS>;
            key-positions = <9 21>;
        };

        game_toggle {
            bindings = <&tog 2>;
            key-positions = <2 11 13>;
        };

        mouse-button1 {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
        };

        mouse-button2 {
            bindings = <&mkp MB2>;
            key-positions = <20 21>;
        };

        mouse-button3 {
            bindings = <&lt_scroll 7 MCLK>;
            key-positions = <19 20>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0>,
                <&macro_wait_time 500>;

            label = "BT0";
        };

        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };

        smallBrackets: smallBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "SMALLBRACKETS";
        };

        bigBrackets: bigBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BIGBRACKETS";
        };

        middleBrackets: middleBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "MIDDLEBRACKETS";
        };

        ime_toggle: ime_toggle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp LALT>;

            label = "IME_TOGGLE";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&bt0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_cw_ccw: encoder_cw_ccw {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp PG_UP>, <&kp PG_DN>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        lt_scroll: layer_tap_scroll {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SCROLL";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&mkp>;
        };

        lt_ime: layer_tap_ime {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_IME";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&ime_toggle>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        win_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R        &kp T                                                      &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F        &kp G        &kp LS(LG(S))      &kp MINUS                  &kp H        &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z      &kp X         &kp C         &kp V        &kp B        &kp COLON          &kp SEMICOLON              &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_ime 3 0  &lt 6 SPACE  &kp LCTRL          &mt RIGHT_SHIFT BACKSPACE  &lt 4 ENTER                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        mac_layer {
            bindings = <
&lt 0 Q           &kp W  &kp E         &kp R      &kp T                                                          &kp Y        &kp U  &lt 0 I    &kp O    &kp P
&kp A             &kp S  &kp D         &kp F      &kp G        &kp LS(LG(S))                      &kp MINUS      &kp H        &kp J  &kp K      &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X  &kp C         &kp V      &kp B        &kp COLON                          &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp M  &kp LEFT_ALT  &lt 0 F13  &lt 3 SPACE  &lt_to_layer_0 0 INT_MUHENKAN      &kp BACKSPACE  &lt 0 ENTER                             &kp DEL
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        GAME {
            bindings = <
&kp ESC    &kp Q   &kp W   &kp E    &kp R                           &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A   &kp S   &kp D    &kp F      &trans       &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB    &kp X   &kp C   &kp V    &kp B      &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &lt 4 T  &kp SPACE  &lt 6 G      &trans  &trans                          &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans    &trans          &kp UP_ARROW    &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans    &trans          &trans          &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                     &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                      &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        BLUETOOTH {
            bindings = <
&trans  &bt0          &trans        &trans        &trans                           &bt0    &bt1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &bt1          &trans        &trans        &trans  &trans      &trans       &trans  &trans  &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans  &trans  &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                      &bt BT_CLR_ALL
            >;
        };

        NUM {
            bindings = <
&kp MINUS          &kp N1        &kp N2  &kp N3  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH          &kp NUMBER_4  &kp N5  &kp N6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT N0  &kp N7        &kp N8  &kp N9  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans             &trans        &kp N0  &trans  &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };
    };
};
