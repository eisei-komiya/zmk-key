#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        tg-win {
            bindings = <&bt0>;
            key-positions = <42 33>;
        };

        tg-mac {
            bindings = <&bt1>;
            key-positions = <42 21>;
        };

        bootcombo {
            bindings = <&bootloader>;
            key-positions = <42 9>;
        };

        bluetoothe_layer_active {
            bindings = <&mo 5>;
            key-positions = <9 5>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <8 9>;
        };

        game_toggle {
            bindings = <&tog 2>;
            key-positions = <2 11 13>;
        };

        mouse-button1 {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
            timeout-ms = <80>;
        };

        mouse-button2 {
            bindings = <&mkp MB2>;
            key-positions = <20 21>;
            timeout-ms = <80>;
        };

        mouse-button3 {
            bindings = <&lt_scroll 7 MCLK>;
            key-positions = <20 19>;
            timeout-ms = <80>;
        };

        under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <32 33>;
        };

        middle-brackets {
            bindings = <&middleBrackets>;
            key-positions = <1 2>;
        };

        small-bracket {
            bindings = <&smallBrackets>;
            key-positions = <11 12>;
        };

        big-bracket {
            bindings = <&bigBrackets>;
            key-positions = <23 24>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0>,
                <&macro_wait_time 500>;

            label = "BT0";
        };

        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };

        smallBrackets: smallBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "SMALLBRACKETS";
        };

        bigBrackets: bigBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BIGBRACKETS";
        };

        middleBrackets: middleBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "MIDDLEBRACKETS";
        };

        ime_toggle: ime_toggle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp LALT>;

            label = "IME_TOGGLE";
        };

        alt_tab_hold: alt_tab_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_TAB_HOLD";
        };

        cmd_tab_hold: cmd_tab_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCMD>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LCMD>;

            label = "CMD_TAB_HOLD";
        };

        param: new_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "NEW_MACRO";
        };

        numlock_on: numlock_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_NUM>;
            label = "NUMLOCK_ON";
        };
    };

    behaviors {
        encoder_cw_ccw: encoder_cw_ccw {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp PG_UP>, <&kp PG_DN>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        lt_scroll: layer_tap_scroll {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SCROLL";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&mkp>;
        };

        lt_ime: layer_tap_ime {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_IME";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&ime_toggle>;
        };

        left_window: left_window {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_WINDOW";
            #binding-cells = <0>;
            bindings = <&kp H>, <&kp LS(TAB)>;

            mods = <(MOD_LALT|MOD_LCTL)>;
        };

        right_window: right_window {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_WINDOW";
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp TAB>;

            mods = <(MOD_LALT|MOD_LCTL)>;
            keep-mods = <(MOD_LCTL|MOD_LALT)>;
        };

        left_window_mac: left_window_mac {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_WINDOW_MAC";
            #binding-cells = <0>;
            bindings = <&kp H>, <&kp LEFT>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        right_window_mac: right_window_mac {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_WINDOW_MAC";
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp RIGHT>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        up_window: up_window {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_WINDOW";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp UP_ARROW>;

            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        down_window: down_window {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_WINDOW";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp DOWN>;

            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        up_window_mac: up_window_mac {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_WINDOW_MAC";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp UP_ARROW>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        down_window_mac: down_window_mac {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_WINDOW_MAC";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp DOWN>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        win_layer {
            bindings = <
&kp Q           &kp W       &kp E         &kp R          &kp T                                            &kp Y         &kp U         &kp I       &kp O          &kp P
&kp A           &kp S       &kp D         &kp F          &kp G        &kp LS(LC(M))        &kp ESC        &left_window  &down_window  &up_window  &right_window  &kp ENTER
&kp Z           &kp X       &kp C         &kp V          &kp B        &mo 4                &kp LEFT_WIN   &kp N         &kp M         &kp COMMA   &kp DOT        &kp SLASH
&kp LEFT_SHIFT  &kp DELETE  &kp LEFT_ALT  &alt_tab_hold  &lt 3 LANG2  &mt LCTRL SPACE      &kp BACKSPACE  &lt 6 LANG1                                            &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        mac_layer {
            bindings = <
&kp Q           &kp W       &kp E      &kp R          &kp T                                           &kp Y             &kp U             &kp I           &kp O              &kp P
&kp A           &kp S       &kp D      &kp F          &kp G        &kp LG(LS(M))       &kp ESC        &left_window_mac  &down_window_mac  &up_window_mac  &right_window_mac  &kp ENTER
&kp Z           &kp X       &kp C      &kp V          &kp B        &mo 4               &kp LALT       &kp N             &kp M             &kp COMMA       &kp DOT            &kp SLASH
&kp LEFT_SHIFT  &kp DELETE  &kp LCTRL  &cmd_tab_hold  &lt 3 LANG2  &mt LGUI SPACE      &kp BACKSPACE  &lt 6 LANG1                                                            &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        GAME {
            bindings = <
&kp ESC    &kp Q   &kp W         &kp E    &kp R                           &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A   &kp S         &kp D    &kp F      &trans       &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB    &kp X   &kp C         &kp V    &kp B      &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &kp LEFT_ALT  &lt 4 T  &kp SPACE  &lt 6 G      &trans  &trans                          &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans     &trans     &trans                            &trans    &kp HOME  &trans        &trans     &trans
&trans  &mo 9   &kp LCTRL  &kp LSHFT  &kp LEFT_ALT  &trans      &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp END
&trans  &trans  &trans     &trans     &trans        &trans      &trans  &trans    &trans    &trans        &trans     &trans
&trans  &trans  &trans     &trans     &trans        &trans      &trans  &trans                                       &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                      &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        BLUETOOTH {
            bindings = <
&trans       &bt0          &trans        &trans        &trans                           &bt0    &bt1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans       &bt1          &trans        &trans        &trans  &trans      &trans       &trans  &trans  &trans        &trans        &trans
&trans       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans  &trans  &trans        &trans        &bt BT_CLR
&numlock_on  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                      &bt BT_CLR_ALL
            >;
        };

        NUM {
            bindings = <
&kp 0x59          &kp 0x5A       &kp 0x5B  &kp 0x5C    &kp 0x5D                         &kp 0x5E       &kp 0x5F       &kp 0x60      &kp 0x61   &kp 0x62
&kp EXCLAMATION   &kp AT_SIGN    &kp HASH  &kp DOLLAR  &kp COLON    &trans      &trans  &kp SEMICOLON  &kp AMPERSAND  &kp ASTERISK  &kp EQUAL  &trans
&kp SINGLE_QUOTE  &kp BACKSLASH  &kp PIPE  &kp FSLH    &kp PERCENT  &trans      &trans  &trans         &kp PLUS       &kp GRAVE     &kp TILDE  &kp DOUBLE_QUOTES
&trans            &trans         &trans    &trans      &trans       &trans      &trans  &trans                                                 &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        ARROW_MAC {
            bindings = <
&trans  &trans  &trans        &trans          &trans                      &trans  &kp LG(A)  &trans  &trans  &trans
&trans  &trans  &kp LEFT_GUI  &kp LEFT_SHIFT  &mo 10  &trans      &trans  &trans  &trans     &trans  &trans  &kp LG(E)
&trans  &trans  &trans        &trans          &trans  &trans      &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans        &trans          &trans  &trans      &trans  &trans                             &trans
            >;
        };

        TAB_ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans           &trans  &trans  &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LC(LS(TAB))  &trans  &trans  &kp LC(TAB)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans           &trans  &trans  &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                        &trans
            >;
        };

        chrome_history {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans                &trans  &trans  &trans                 &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LG(LEFT_BRACKET)  &trans  &trans  &kp LG(RIGHT_BRACKET)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                &trans  &trans  &trans                 &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                       &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        arrow_mac {
            if-layers = <1 3>;
            then-layer = <8>;
        };
    };
};
