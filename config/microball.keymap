#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define WIN_LAYER 0
#define MAC_LAYER 1
#define FUNCTION 2
#define ARROW 3
#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define BLUETOOTH 7

&mt {
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        tg-win {
            bindings = <&bt0>;
            key-positions = <42 33>;
        };

        tg-mac {
            bindings = <&bt1>;
            key-positions = <42 21>;
        };

        bootcombo {
            bindings = <&bootloader>;
            key-positions = <42 9>;
        };

        bluetoothe_layer_active {
            bindings = <&mo 7>;
            key-positions = <9 5>;
        };

        small_brackets {
            bindings = <&smallBrackets>;
            key-positions = <19 20>;
        };

        middle_brackets {
            bindings = <&middleBrackets>;
            key-positions = <31 32>;
        };

        big_brackets {
            bindings = <&bigBrackets>;
            key-positions = <7 8>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0>,
                <&macro_wait_time 500>;

            label = "BT0";
        };

        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };

        smallBrackets: middleBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "MIDDLEBRACKETS";
        };

        bigBrackets: middleBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "MIDDLEBRACKETS";
        };

        middleBrackets: middleBrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "MIDDLEBRACKETS";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&bt0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_cw_ccw: encoder_cw_ccw {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp PG_UP>, <&kp PG_DN>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        lt_scroll: layer_tap_scroll {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SCROLL";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&mkp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        win_layer {
            bindings = <
&kp Q             &kp W                   &kp E         &kp R            &kp T                                              &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S                   &kp D         &kp F            &kp G            &kp LS(LG(S))      &kp MINUS      &kp H        &kp J  &kp K      &kp L    &lt 4 SEMICOLON
&mt LEFT_SHIFT Z  &kp X                   &kp C         &kp V            &kp B            &kp COLON          &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &lt BLUETOOTH LEFT_WIN  &kp LEFT_ALT  &lt 3 LA(GRAVE)  &lt 2 BACKSPACE  &kp LCTRL          &kp ENTER      &lt 0 ENTER                             &kp DEL
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        mac_layer {
            bindings = <
&lt BLUETOOTH Q   &kp W  &kp E         &kp R                   &kp T                                                              &kp Y        &kp U  &lt MOUSE I  &kp O    &kp P
&kp A             &kp S  &kp D         &kp F                   &kp G            &kp LS(LG(S))                      &kp MINUS      &kp H        &kp J  &kp K        &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X  &kp C         &kp V                   &kp B            &kp COLON                          &kp SEMICOLON  &kp N        &kp M  &kp COMMA    &kp DOT  &kp SLASH
&kp LCTRL         &kp M  &kp LEFT_ALT  &lt FUNCTION LA(GRAVE)  &lt ARROW SPACE  &lt_to_layer_0 2 INT_MUHENKAN      &kp BACKSPACE  &lt 0 ENTER                               &kp DEL
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans    &trans          &kp UP_ARROW    &trans           &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans    &trans          &trans          &trans           &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                     &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans                 &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &lt_scroll SCROLL MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans                 &trans    &trans
&kp A   &trans  &trans  &trans  &trans  &trans      &trans  &trans                                             &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_cw_ccw>;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        BLUETOOTH {
            bindings = <
&trans  &bt0          &trans        &trans        &trans                           &bt0    &bt1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &bt1          &trans        &trans        &trans  &trans      &trans       &trans  &trans  &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans  &trans  &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                      &bt BT_CLR_ALL
            >;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
